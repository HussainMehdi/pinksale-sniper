/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface PinksaleabiInterface extends utils.Interface {
  functions: {
    "addWhitelistedUsers(address[])": FunctionFragment;
    "cancel()": FunctionFragment;
    "claim()": FunctionFragment;
    "claimedOf(address)": FunctionFragment;
    "completedKyc()": FunctionFragment;
    "contribute()": FunctionFragment;
    "contributionOf(address)": FunctionFragment;
    "convert(uint256)": FunctionFragment;
    "cycle()": FunctionFragment;
    "cycleReleasePct()": FunctionFragment;
    "distributePurchasedTokens(uint256,uint256)": FunctionFragment;
    "distributeRefund(uint256,uint256)": FunctionFragment;
    "distributionCompleted(uint8)": FunctionFragment;
    "emergencyWithdraw(address,uint256)": FunctionFragment;
    "emergencyWithdraw(address,address,uint256)": FunctionFragment;
    "endTime()": FunctionFragment;
    "factory()": FunctionFragment;
    "finalize()": FunctionFragment;
    "finishTime()": FunctionFragment;
    "getContributionAmount(address)": FunctionFragment;
    "getContributorCount()": FunctionFragment;
    "getContributors(uint256,uint256)": FunctionFragment;
    "getNumberOfWhitelistedUsers()": FunctionFragment;
    "getUndistributedIndexes(uint8)": FunctionFragment;
    "getUpdatedState()": FunctionFragment;
    "getWhitelistedUsers(uint256,uint256)": FunctionFragment;
    "governance()": FunctionFragment;
    "hardCap()": FunctionFragment;
    "initialize(address[4],uint256[2],uint256[2],uint256[2],uint256[3],uint256[2],bool,uint256,uint256,string)": FunctionFragment;
    "initializeContributorVesting(uint256,uint256,uint256)": FunctionFragment;
    "initializeVesting(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "isUserWhitelisted(address)": FunctionFragment;
    "liquidityBalance()": FunctionFragment;
    "liquidityListingRate()": FunctionFragment;
    "liquidityLockDays()": FunctionFragment;
    "liquidityPercent()": FunctionFragment;
    "liquidityUnlockTime()": FunctionFragment;
    "lockId()": FunctionFragment;
    "maxContribution()": FunctionFragment;
    "minContribution()": FunctionFragment;
    "owner()": FunctionFragment;
    "poolDetails()": FunctionFragment;
    "poolState()": FunctionFragment;
    "purchasedOf(address)": FunctionFragment;
    "rate()": FunctionFragment;
    "refundType()": FunctionFragment;
    "refundedOf(address)": FunctionFragment;
    "removeWhitelistedUsers(address[])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "router()": FunctionFragment;
    "setGovernance(address)": FunctionFragment;
    "setUseWhitelisting(bool)": FunctionFragment;
    "softCap()": FunctionFragment;
    "startTime()": FunctionFragment;
    "tgeLockDuration()": FunctionFragment;
    "tgeReleasePct()": FunctionFragment;
    "tgeTime()": FunctionFragment;
    "token()": FunctionFragment;
    "totalClaimed()": FunctionFragment;
    "totalRaised()": FunctionFragment;
    "totalRefunded()": FunctionFragment;
    "totalVestedTokens()": FunctionFragment;
    "totalVestingTokens()": FunctionFragment;
    "totalVolumePurchased()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateCompletedKyc(bool)": FunctionFragment;
    "updatePoolDetails(string)": FunctionFragment;
    "useWhitelisting()": FunctionFragment;
    "vcCycle()": FunctionFragment;
    "vcCycleReleasePct()": FunctionFragment;
    "vcTgeReleasePct()": FunctionFragment;
    "version()": FunctionFragment;
    "withdrawCancelledTokens()": FunctionFragment;
    "withdrawContribution()": FunctionFragment;
    "withdrawVestingToken()": FunctionFragment;
    "withdrawableContributorVestingTokens(address)": FunctionFragment;
    "withdrawableTokens()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addWhitelistedUsers"
      | "cancel"
      | "claim"
      | "claimedOf"
      | "completedKyc"
      | "contribute"
      | "contributionOf"
      | "convert"
      | "cycle"
      | "cycleReleasePct"
      | "distributePurchasedTokens"
      | "distributeRefund"
      | "distributionCompleted"
      | "emergencyWithdraw(address,uint256)"
      | "emergencyWithdraw(address,address,uint256)"
      | "endTime"
      | "factory"
      | "finalize"
      | "finishTime"
      | "getContributionAmount"
      | "getContributorCount"
      | "getContributors"
      | "getNumberOfWhitelistedUsers"
      | "getUndistributedIndexes"
      | "getUpdatedState"
      | "getWhitelistedUsers"
      | "governance"
      | "hardCap"
      | "initialize"
      | "initializeContributorVesting"
      | "initializeVesting"
      | "isUserWhitelisted"
      | "liquidityBalance"
      | "liquidityListingRate"
      | "liquidityLockDays"
      | "liquidityPercent"
      | "liquidityUnlockTime"
      | "lockId"
      | "maxContribution"
      | "minContribution"
      | "owner"
      | "poolDetails"
      | "poolState"
      | "purchasedOf"
      | "rate"
      | "refundType"
      | "refundedOf"
      | "removeWhitelistedUsers"
      | "renounceOwnership"
      | "router"
      | "setGovernance"
      | "setUseWhitelisting"
      | "softCap"
      | "startTime"
      | "tgeLockDuration"
      | "tgeReleasePct"
      | "tgeTime"
      | "token"
      | "totalClaimed"
      | "totalRaised"
      | "totalRefunded"
      | "totalVestedTokens"
      | "totalVestingTokens"
      | "totalVolumePurchased"
      | "transferOwnership"
      | "updateCompletedKyc"
      | "updatePoolDetails"
      | "useWhitelisting"
      | "vcCycle"
      | "vcCycleReleasePct"
      | "vcTgeReleasePct"
      | "version"
      | "withdrawCancelledTokens"
      | "withdrawContribution"
      | "withdrawVestingToken"
      | "withdrawableContributorVestingTokens"
      | "withdrawableTokens"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addWhitelistedUsers",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(functionFragment: "cancel", values?: undefined): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimedOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "completedKyc",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contribute",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contributionOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "convert",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "cycle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cycleReleasePct",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distributePurchasedTokens",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeRefund",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "distributionCompleted",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw(address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "endTime", values?: undefined): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(functionFragment: "finalize", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "finishTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContributionAmount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getContributorCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContributors",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfWhitelistedUsers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUndistributedIndexes",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUpdatedState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWhitelistedUsers",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "hardCap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ],
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeContributorVesting",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeVesting",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isUserWhitelisted",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityListingRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityLockDays",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityUnlockTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lockId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxContribution",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minContribution",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolDetails",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "poolState", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "purchasedOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "rate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "refundType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "refundedOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeWhitelistedUsers",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setGovernance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUseWhitelisting",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(functionFragment: "softCap", values?: undefined): string;
  encodeFunctionData(functionFragment: "startTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tgeLockDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tgeReleasePct",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tgeTime", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalClaimed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalRaised",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalRefunded",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalVestedTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalVestingTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalVolumePurchased",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCompletedKyc",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePoolDetails",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "useWhitelisting",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "vcCycle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "vcCycleReleasePct",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vcTgeReleasePct",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawCancelledTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawContribution",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawVestingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawableContributorVestingTokens",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawableTokens",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addWhitelistedUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimedOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "completedKyc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "contribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contributionOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "convert", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cycle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cycleReleasePct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributePurchasedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributionCompleted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "finalize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "finishTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getContributionAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContributorCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContributors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfWhitelistedUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUndistributedIndexes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUpdatedState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWhitelistedUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hardCap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeContributorVesting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeVesting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isUserWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityListingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityLockDays",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityUnlockTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxContribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minContribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolState", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "purchasedOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refundType", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refundedOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeWhitelistedUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUseWhitelisting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "softCap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tgeLockDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tgeReleasePct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tgeTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRaised",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRefunded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalVestedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalVestingTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalVolumePurchased",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCompletedKyc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePoolDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "useWhitelisting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vcCycle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vcCycleReleasePct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vcTgeReleasePct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCancelledTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawContribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawVestingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawableContributorVestingTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawableTokens",
    data: BytesLike
  ): Result;

  events: {
    "Cancelled(uint256)": EventFragment;
    "Claimed(address,uint256,uint256)": EventFragment;
    "Contributed(address,uint256,uint256,uint256,uint256)": EventFragment;
    "Finalized(uint256,uint256)": EventFragment;
    "KycUpdated(bool,uint256)": EventFragment;
    "LiquidityWithdrawn(uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PoolUpdated(uint256)": EventFragment;
    "VestingTokenWithdrawn(uint256,uint256)": EventFragment;
    "WithdrawnContribution(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Cancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Contributed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Finalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KycUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VestingTokenWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawnContribution"): EventFragment;
}

export interface CancelledEventObject {
  timestamp: BigNumber;
}
export type CancelledEvent = TypedEvent<[BigNumber], CancelledEventObject>;

export type CancelledEventFilter = TypedEventFilter<CancelledEvent>;

export interface ClaimedEventObject {
  user: string;
  volume: BigNumber;
  total: BigNumber;
}
export type ClaimedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ClaimedEventObject
>;

export type ClaimedEventFilter = TypedEventFilter<ClaimedEvent>;

export interface ContributedEventObject {
  user: string;
  amount: BigNumber;
  volume: BigNumber;
  total: BigNumber;
  timestamp: BigNumber;
}
export type ContributedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  ContributedEventObject
>;

export type ContributedEventFilter = TypedEventFilter<ContributedEvent>;

export interface FinalizedEventObject {
  liquidity: BigNumber;
  timestamp: BigNumber;
}
export type FinalizedEvent = TypedEvent<
  [BigNumber, BigNumber],
  FinalizedEventObject
>;

export type FinalizedEventFilter = TypedEventFilter<FinalizedEvent>;

export interface KycUpdatedEventObject {
  completed: boolean;
  timestamp: BigNumber;
}
export type KycUpdatedEvent = TypedEvent<
  [boolean, BigNumber],
  KycUpdatedEventObject
>;

export type KycUpdatedEventFilter = TypedEventFilter<KycUpdatedEvent>;

export interface LiquidityWithdrawnEventObject {
  amount: BigNumber;
  timestamp: BigNumber;
}
export type LiquidityWithdrawnEvent = TypedEvent<
  [BigNumber, BigNumber],
  LiquidityWithdrawnEventObject
>;

export type LiquidityWithdrawnEventFilter =
  TypedEventFilter<LiquidityWithdrawnEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PoolUpdatedEventObject {
  timestamp: BigNumber;
}
export type PoolUpdatedEvent = TypedEvent<[BigNumber], PoolUpdatedEventObject>;

export type PoolUpdatedEventFilter = TypedEventFilter<PoolUpdatedEvent>;

export interface VestingTokenWithdrawnEventObject {
  amount: BigNumber;
  timestamp: BigNumber;
}
export type VestingTokenWithdrawnEvent = TypedEvent<
  [BigNumber, BigNumber],
  VestingTokenWithdrawnEventObject
>;

export type VestingTokenWithdrawnEventFilter =
  TypedEventFilter<VestingTokenWithdrawnEvent>;

export interface WithdrawnContributionEventObject {
  user: string;
  amount: BigNumber;
}
export type WithdrawnContributionEvent = TypedEvent<
  [string, BigNumber],
  WithdrawnContributionEventObject
>;

export type WithdrawnContributionEventFilter =
  TypedEventFilter<WithdrawnContributionEvent>;

export interface Pinksaleabi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PinksaleabiInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addWhitelistedUsers(
      users: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancel(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimedOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    completedKyc(overrides?: CallOverrides): Promise<[boolean]>;

    contribute(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    contributionOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    convert(
      amountInWei: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    cycle(overrides?: CallOverrides): Promise<[BigNumber]>;

    cycleReleasePct(overrides?: CallOverrides): Promise<[BigNumber]>;

    distributePurchasedTokens(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    distributeRefund(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    distributionCompleted(
      distributedType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "emergencyWithdraw(address,uint256)"(
      to_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "emergencyWithdraw(address,address,uint256)"(
      token_: PromiseOrValue<string>,
      to_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    endTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    finalize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    finishTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    getContributionAmount(
      user_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getContributorCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getContributors(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getNumberOfWhitelistedUsers(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUndistributedIndexes(
      distributedType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getUpdatedState(
      overrides?: CallOverrides
    ): Promise<[BigNumber, number, boolean, BigNumber, string, boolean]>;

    getWhitelistedUsers(
      startIndex: PromiseOrValue<BigNumberish>,
      endIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    hardCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _addrs: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ],
      _rateSettings: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _contributionSettings: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _capSettings: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _timeSettings: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _feeSettings: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _useWhitelisting: PromiseOrValue<boolean>,
      _liquidityPercent: PromiseOrValue<BigNumberish>,
      _refundType: PromiseOrValue<BigNumberish>,
      _poolDetails: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initializeContributorVesting(
      _vcTgeReleasePct: PromiseOrValue<BigNumberish>,
      _vcCycleReleasePct: PromiseOrValue<BigNumberish>,
      _vcCycle: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initializeVesting(
      _totalVestingTokens: PromiseOrValue<BigNumberish>,
      _tgeLockDuration: PromiseOrValue<BigNumberish>,
      _tgeReleasePct: PromiseOrValue<BigNumberish>,
      _cycle: PromiseOrValue<BigNumberish>,
      _cycleReleasePct: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isUserWhitelisted(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    liquidityBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidityListingRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidityLockDays(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidityPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidityUnlockTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    lockId(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxContribution(overrides?: CallOverrides): Promise<[BigNumber]>;

    minContribution(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    poolDetails(overrides?: CallOverrides): Promise<[string]>;

    poolState(overrides?: CallOverrides): Promise<[number]>;

    purchasedOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rate(overrides?: CallOverrides): Promise<[BigNumber]>;

    refundType(overrides?: CallOverrides): Promise<[BigNumber]>;

    refundedOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    removeWhitelistedUsers(
      users: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    router(overrides?: CallOverrides): Promise<[string]>;

    setGovernance(
      governance_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUseWhitelisting(
      use: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    softCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    startTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    tgeLockDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    tgeReleasePct(overrides?: CallOverrides): Promise<[BigNumber]>;

    tgeTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    totalClaimed(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalRaised(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalRefunded(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalVestedTokens(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalVestingTokens(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalVolumePurchased(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateCompletedKyc(
      completed_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePoolDetails(
      details_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    useWhitelisting(overrides?: CallOverrides): Promise<[boolean]>;

    vcCycle(overrides?: CallOverrides): Promise<[BigNumber]>;

    vcCycleReleasePct(overrides?: CallOverrides): Promise<[BigNumber]>;

    vcTgeReleasePct(overrides?: CallOverrides): Promise<[BigNumber]>;

    version(overrides?: CallOverrides): Promise<[number]>;

    withdrawCancelledTokens(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawContribution(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawVestingToken(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawableContributorVestingTokens(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdrawableTokens(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  addWhitelistedUsers(
    users: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancel(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claim(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimedOf(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  completedKyc(overrides?: CallOverrides): Promise<boolean>;

  contribute(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  contributionOf(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  convert(
    amountInWei: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cycle(overrides?: CallOverrides): Promise<BigNumber>;

  cycleReleasePct(overrides?: CallOverrides): Promise<BigNumber>;

  distributePurchasedTokens(
    start: PromiseOrValue<BigNumberish>,
    end: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  distributeRefund(
    start: PromiseOrValue<BigNumberish>,
    end: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  distributionCompleted(
    distributedType: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "emergencyWithdraw(address,uint256)"(
    to_: PromiseOrValue<string>,
    amount_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "emergencyWithdraw(address,address,uint256)"(
    token_: PromiseOrValue<string>,
    to_: PromiseOrValue<string>,
    amount_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  endTime(overrides?: CallOverrides): Promise<BigNumber>;

  factory(overrides?: CallOverrides): Promise<string>;

  finalize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  finishTime(overrides?: CallOverrides): Promise<BigNumber>;

  getContributionAmount(
    user_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getContributorCount(overrides?: CallOverrides): Promise<BigNumber>;

  getContributors(
    start: PromiseOrValue<BigNumberish>,
    end: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getNumberOfWhitelistedUsers(overrides?: CallOverrides): Promise<BigNumber>;

  getUndistributedIndexes(
    distributedType: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getUpdatedState(
    overrides?: CallOverrides
  ): Promise<[BigNumber, number, boolean, BigNumber, string, boolean]>;

  getWhitelistedUsers(
    startIndex: PromiseOrValue<BigNumberish>,
    endIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  governance(overrides?: CallOverrides): Promise<string>;

  hardCap(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _addrs: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ],
    _rateSettings: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    _contributionSettings: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ],
    _capSettings: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    _timeSettings: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ],
    _feeSettings: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    _useWhitelisting: PromiseOrValue<boolean>,
    _liquidityPercent: PromiseOrValue<BigNumberish>,
    _refundType: PromiseOrValue<BigNumberish>,
    _poolDetails: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initializeContributorVesting(
    _vcTgeReleasePct: PromiseOrValue<BigNumberish>,
    _vcCycleReleasePct: PromiseOrValue<BigNumberish>,
    _vcCycle: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initializeVesting(
    _totalVestingTokens: PromiseOrValue<BigNumberish>,
    _tgeLockDuration: PromiseOrValue<BigNumberish>,
    _tgeReleasePct: PromiseOrValue<BigNumberish>,
    _cycle: PromiseOrValue<BigNumberish>,
    _cycleReleasePct: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isUserWhitelisted(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  liquidityBalance(overrides?: CallOverrides): Promise<BigNumber>;

  liquidityListingRate(overrides?: CallOverrides): Promise<BigNumber>;

  liquidityLockDays(overrides?: CallOverrides): Promise<BigNumber>;

  liquidityPercent(overrides?: CallOverrides): Promise<BigNumber>;

  liquidityUnlockTime(overrides?: CallOverrides): Promise<BigNumber>;

  lockId(overrides?: CallOverrides): Promise<BigNumber>;

  maxContribution(overrides?: CallOverrides): Promise<BigNumber>;

  minContribution(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  poolDetails(overrides?: CallOverrides): Promise<string>;

  poolState(overrides?: CallOverrides): Promise<number>;

  purchasedOf(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rate(overrides?: CallOverrides): Promise<BigNumber>;

  refundType(overrides?: CallOverrides): Promise<BigNumber>;

  refundedOf(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  removeWhitelistedUsers(
    users: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  router(overrides?: CallOverrides): Promise<string>;

  setGovernance(
    governance_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUseWhitelisting(
    use: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  softCap(overrides?: CallOverrides): Promise<BigNumber>;

  startTime(overrides?: CallOverrides): Promise<BigNumber>;

  tgeLockDuration(overrides?: CallOverrides): Promise<BigNumber>;

  tgeReleasePct(overrides?: CallOverrides): Promise<BigNumber>;

  tgeTime(overrides?: CallOverrides): Promise<BigNumber>;

  token(overrides?: CallOverrides): Promise<string>;

  totalClaimed(overrides?: CallOverrides): Promise<BigNumber>;

  totalRaised(overrides?: CallOverrides): Promise<BigNumber>;

  totalRefunded(overrides?: CallOverrides): Promise<BigNumber>;

  totalVestedTokens(overrides?: CallOverrides): Promise<BigNumber>;

  totalVestingTokens(overrides?: CallOverrides): Promise<BigNumber>;

  totalVolumePurchased(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateCompletedKyc(
    completed_: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePoolDetails(
    details_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  useWhitelisting(overrides?: CallOverrides): Promise<boolean>;

  vcCycle(overrides?: CallOverrides): Promise<BigNumber>;

  vcCycleReleasePct(overrides?: CallOverrides): Promise<BigNumber>;

  vcTgeReleasePct(overrides?: CallOverrides): Promise<BigNumber>;

  version(overrides?: CallOverrides): Promise<number>;

  withdrawCancelledTokens(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawContribution(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawVestingToken(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawableContributorVestingTokens(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdrawableTokens(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    addWhitelistedUsers(
      users: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    cancel(overrides?: CallOverrides): Promise<void>;

    claim(overrides?: CallOverrides): Promise<void>;

    claimedOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    completedKyc(overrides?: CallOverrides): Promise<boolean>;

    contribute(overrides?: CallOverrides): Promise<void>;

    contributionOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convert(
      amountInWei: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cycle(overrides?: CallOverrides): Promise<BigNumber>;

    cycleReleasePct(overrides?: CallOverrides): Promise<BigNumber>;

    distributePurchasedTokens(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    distributeRefund(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    distributionCompleted(
      distributedType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "emergencyWithdraw(address,uint256)"(
      to_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "emergencyWithdraw(address,address,uint256)"(
      token_: PromiseOrValue<string>,
      to_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    endTime(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<string>;

    finalize(overrides?: CallOverrides): Promise<void>;

    finishTime(overrides?: CallOverrides): Promise<BigNumber>;

    getContributionAmount(
      user_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getContributorCount(overrides?: CallOverrides): Promise<BigNumber>;

    getContributors(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getNumberOfWhitelistedUsers(overrides?: CallOverrides): Promise<BigNumber>;

    getUndistributedIndexes(
      distributedType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getUpdatedState(
      overrides?: CallOverrides
    ): Promise<[BigNumber, number, boolean, BigNumber, string, boolean]>;

    getWhitelistedUsers(
      startIndex: PromiseOrValue<BigNumberish>,
      endIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    governance(overrides?: CallOverrides): Promise<string>;

    hardCap(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _addrs: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ],
      _rateSettings: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _contributionSettings: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _capSettings: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _timeSettings: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _feeSettings: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _useWhitelisting: PromiseOrValue<boolean>,
      _liquidityPercent: PromiseOrValue<BigNumberish>,
      _refundType: PromiseOrValue<BigNumberish>,
      _poolDetails: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    initializeContributorVesting(
      _vcTgeReleasePct: PromiseOrValue<BigNumberish>,
      _vcCycleReleasePct: PromiseOrValue<BigNumberish>,
      _vcCycle: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    initializeVesting(
      _totalVestingTokens: PromiseOrValue<BigNumberish>,
      _tgeLockDuration: PromiseOrValue<BigNumberish>,
      _tgeReleasePct: PromiseOrValue<BigNumberish>,
      _cycle: PromiseOrValue<BigNumberish>,
      _cycleReleasePct: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    isUserWhitelisted(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    liquidityBalance(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityListingRate(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityLockDays(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityPercent(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityUnlockTime(overrides?: CallOverrides): Promise<BigNumber>;

    lockId(overrides?: CallOverrides): Promise<BigNumber>;

    maxContribution(overrides?: CallOverrides): Promise<BigNumber>;

    minContribution(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    poolDetails(overrides?: CallOverrides): Promise<string>;

    poolState(overrides?: CallOverrides): Promise<number>;

    purchasedOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rate(overrides?: CallOverrides): Promise<BigNumber>;

    refundType(overrides?: CallOverrides): Promise<BigNumber>;

    refundedOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeWhitelistedUsers(
      users: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    router(overrides?: CallOverrides): Promise<string>;

    setGovernance(
      governance_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setUseWhitelisting(
      use: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    softCap(overrides?: CallOverrides): Promise<BigNumber>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    tgeLockDuration(overrides?: CallOverrides): Promise<BigNumber>;

    tgeReleasePct(overrides?: CallOverrides): Promise<BigNumber>;

    tgeTime(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;

    totalClaimed(overrides?: CallOverrides): Promise<BigNumber>;

    totalRaised(overrides?: CallOverrides): Promise<BigNumber>;

    totalRefunded(overrides?: CallOverrides): Promise<BigNumber>;

    totalVestedTokens(overrides?: CallOverrides): Promise<BigNumber>;

    totalVestingTokens(overrides?: CallOverrides): Promise<BigNumber>;

    totalVolumePurchased(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCompletedKyc(
      completed_: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePoolDetails(
      details_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    useWhitelisting(overrides?: CallOverrides): Promise<boolean>;

    vcCycle(overrides?: CallOverrides): Promise<BigNumber>;

    vcCycleReleasePct(overrides?: CallOverrides): Promise<BigNumber>;

    vcTgeReleasePct(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<number>;

    withdrawCancelledTokens(overrides?: CallOverrides): Promise<void>;

    withdrawContribution(overrides?: CallOverrides): Promise<void>;

    withdrawVestingToken(overrides?: CallOverrides): Promise<void>;

    withdrawableContributorVestingTokens(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawableTokens(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Cancelled(uint256)"(timestamp?: null): CancelledEventFilter;
    Cancelled(timestamp?: null): CancelledEventFilter;

    "Claimed(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      volume?: null,
      total?: null
    ): ClaimedEventFilter;
    Claimed(
      user?: PromiseOrValue<string> | null,
      volume?: null,
      total?: null
    ): ClaimedEventFilter;

    "Contributed(address,uint256,uint256,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      amount?: null,
      volume?: null,
      total?: null,
      timestamp?: null
    ): ContributedEventFilter;
    Contributed(
      user?: PromiseOrValue<string> | null,
      amount?: null,
      volume?: null,
      total?: null,
      timestamp?: null
    ): ContributedEventFilter;

    "Finalized(uint256,uint256)"(
      liquidity?: null,
      timestamp?: null
    ): FinalizedEventFilter;
    Finalized(liquidity?: null, timestamp?: null): FinalizedEventFilter;

    "KycUpdated(bool,uint256)"(
      completed?: null,
      timestamp?: null
    ): KycUpdatedEventFilter;
    KycUpdated(completed?: null, timestamp?: null): KycUpdatedEventFilter;

    "LiquidityWithdrawn(uint256,uint256)"(
      amount?: null,
      timestamp?: null
    ): LiquidityWithdrawnEventFilter;
    LiquidityWithdrawn(
      amount?: null,
      timestamp?: null
    ): LiquidityWithdrawnEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PoolUpdated(uint256)"(timestamp?: null): PoolUpdatedEventFilter;
    PoolUpdated(timestamp?: null): PoolUpdatedEventFilter;

    "VestingTokenWithdrawn(uint256,uint256)"(
      amount?: null,
      timestamp?: null
    ): VestingTokenWithdrawnEventFilter;
    VestingTokenWithdrawn(
      amount?: null,
      timestamp?: null
    ): VestingTokenWithdrawnEventFilter;

    "WithdrawnContribution(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawnContributionEventFilter;
    WithdrawnContribution(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawnContributionEventFilter;
  };

  estimateGas: {
    addWhitelistedUsers(
      users: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancel(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimedOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    completedKyc(overrides?: CallOverrides): Promise<BigNumber>;

    contribute(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    contributionOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convert(
      amountInWei: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cycle(overrides?: CallOverrides): Promise<BigNumber>;

    cycleReleasePct(overrides?: CallOverrides): Promise<BigNumber>;

    distributePurchasedTokens(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    distributeRefund(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    distributionCompleted(
      distributedType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "emergencyWithdraw(address,uint256)"(
      to_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "emergencyWithdraw(address,address,uint256)"(
      token_: PromiseOrValue<string>,
      to_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    endTime(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    finalize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    finishTime(overrides?: CallOverrides): Promise<BigNumber>;

    getContributionAmount(
      user_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getContributorCount(overrides?: CallOverrides): Promise<BigNumber>;

    getContributors(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumberOfWhitelistedUsers(overrides?: CallOverrides): Promise<BigNumber>;

    getUndistributedIndexes(
      distributedType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUpdatedState(overrides?: CallOverrides): Promise<BigNumber>;

    getWhitelistedUsers(
      startIndex: PromiseOrValue<BigNumberish>,
      endIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    hardCap(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _addrs: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ],
      _rateSettings: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _contributionSettings: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _capSettings: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _timeSettings: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _feeSettings: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _useWhitelisting: PromiseOrValue<boolean>,
      _liquidityPercent: PromiseOrValue<BigNumberish>,
      _refundType: PromiseOrValue<BigNumberish>,
      _poolDetails: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initializeContributorVesting(
      _vcTgeReleasePct: PromiseOrValue<BigNumberish>,
      _vcCycleReleasePct: PromiseOrValue<BigNumberish>,
      _vcCycle: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initializeVesting(
      _totalVestingTokens: PromiseOrValue<BigNumberish>,
      _tgeLockDuration: PromiseOrValue<BigNumberish>,
      _tgeReleasePct: PromiseOrValue<BigNumberish>,
      _cycle: PromiseOrValue<BigNumberish>,
      _cycleReleasePct: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isUserWhitelisted(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidityBalance(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityListingRate(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityLockDays(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityPercent(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityUnlockTime(overrides?: CallOverrides): Promise<BigNumber>;

    lockId(overrides?: CallOverrides): Promise<BigNumber>;

    maxContribution(overrides?: CallOverrides): Promise<BigNumber>;

    minContribution(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    poolDetails(overrides?: CallOverrides): Promise<BigNumber>;

    poolState(overrides?: CallOverrides): Promise<BigNumber>;

    purchasedOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rate(overrides?: CallOverrides): Promise<BigNumber>;

    refundType(overrides?: CallOverrides): Promise<BigNumber>;

    refundedOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeWhitelistedUsers(
      users: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    setGovernance(
      governance_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUseWhitelisting(
      use: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    softCap(overrides?: CallOverrides): Promise<BigNumber>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    tgeLockDuration(overrides?: CallOverrides): Promise<BigNumber>;

    tgeReleasePct(overrides?: CallOverrides): Promise<BigNumber>;

    tgeTime(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    totalClaimed(overrides?: CallOverrides): Promise<BigNumber>;

    totalRaised(overrides?: CallOverrides): Promise<BigNumber>;

    totalRefunded(overrides?: CallOverrides): Promise<BigNumber>;

    totalVestedTokens(overrides?: CallOverrides): Promise<BigNumber>;

    totalVestingTokens(overrides?: CallOverrides): Promise<BigNumber>;

    totalVolumePurchased(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateCompletedKyc(
      completed_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePoolDetails(
      details_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    useWhitelisting(overrides?: CallOverrides): Promise<BigNumber>;

    vcCycle(overrides?: CallOverrides): Promise<BigNumber>;

    vcCycleReleasePct(overrides?: CallOverrides): Promise<BigNumber>;

    vcTgeReleasePct(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawCancelledTokens(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawContribution(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawVestingToken(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawableContributorVestingTokens(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawableTokens(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addWhitelistedUsers(
      users: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancel(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claim(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimedOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    completedKyc(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contribute(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    contributionOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convert(
      amountInWei: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cycle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cycleReleasePct(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    distributePurchasedTokens(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    distributeRefund(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    distributionCompleted(
      distributedType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "emergencyWithdraw(address,uint256)"(
      to_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "emergencyWithdraw(address,address,uint256)"(
      token_: PromiseOrValue<string>,
      to_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    endTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finalize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    finishTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getContributionAmount(
      user_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getContributorCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getContributors(
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumberOfWhitelistedUsers(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUndistributedIndexes(
      distributedType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUpdatedState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getWhitelistedUsers(
      startIndex: PromiseOrValue<BigNumberish>,
      endIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hardCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _addrs: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
      ],
      _rateSettings: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _contributionSettings: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _capSettings: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _timeSettings: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _feeSettings: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _useWhitelisting: PromiseOrValue<boolean>,
      _liquidityPercent: PromiseOrValue<BigNumberish>,
      _refundType: PromiseOrValue<BigNumberish>,
      _poolDetails: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initializeContributorVesting(
      _vcTgeReleasePct: PromiseOrValue<BigNumberish>,
      _vcCycleReleasePct: PromiseOrValue<BigNumberish>,
      _vcCycle: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initializeVesting(
      _totalVestingTokens: PromiseOrValue<BigNumberish>,
      _tgeLockDuration: PromiseOrValue<BigNumberish>,
      _tgeReleasePct: PromiseOrValue<BigNumberish>,
      _cycle: PromiseOrValue<BigNumberish>,
      _cycleReleasePct: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isUserWhitelisted(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidityBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidityListingRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidityLockDays(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidityPercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidityUnlockTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxContribution(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minContribution(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolDetails(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    purchasedOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    refundType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    refundedOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeWhitelistedUsers(
      users: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setGovernance(
      governance_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUseWhitelisting(
      use: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    softCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tgeLockDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tgeReleasePct(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tgeTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalClaimed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalRaised(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalRefunded(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalVestedTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalVestingTokens(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalVolumePurchased(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateCompletedKyc(
      completed_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePoolDetails(
      details_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    useWhitelisting(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vcCycle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vcCycleReleasePct(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vcTgeReleasePct(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawCancelledTokens(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawContribution(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawVestingToken(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawableContributorVestingTokens(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawableTokens(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
